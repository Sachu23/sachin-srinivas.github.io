{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = mergeDiff;\n\n// core keys merging algorithm. If previous render's keys are [a, b], and the\n// next render's [c, b, d], what's the final merged keys and ordering?\n// - c and a must both be before b\n// - b before d\n// - ordering between a and c ambiguous\n// this reduces to merging two partially ordered lists (e.g. lists where not\n// every item has a definite ordering, like comparing a and c above). For the\n// ambiguous ordering we deterministically choose to place the next render's\n// item after the previous'; so c after a\n// this is called a topological sorting. Except the existing algorithms don't\n// work well with js bc of the amount of allocation, and isn't optimized for our\n// current use-case bc the runtime is linear in terms of edges (see wiki for\n// meaning), which is huge when two lists have many common elements\nfunction mergeDiff(prev, next, onRemove) {\n  // bookkeeping for easier access of a key's index below. This is 2 allocations +\n  // potentially triggering chrome hash map mode for objs (so it might be faster\n  // to loop through and find a key's index each time), but I no longer care\n  var prevKeyIndex = {};\n  for (var i = 0; i < prev.length; i++) {\n    prevKeyIndex[prev[i].key] = i;\n  }\n  var nextKeyIndex = {};\n  for (var _i = 0; _i < next.length; _i++) {\n    nextKeyIndex[next[_i].key] = _i;\n  } // first, an overly elaborate way of merging prev and next, eliminating\n  // duplicates (in terms of keys). If there's dupe, keep the item in next).\n  // This way of writing it saves allocations\n\n  var ret = [];\n  for (var _i2 = 0; _i2 < next.length; _i2++) {\n    ret[_i2] = next[_i2];\n  }\n  for (var _i3 = 0; _i3 < prev.length; _i3++) {\n    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[_i3].key)) {\n      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n      // merge in keys that the user desires to kill\n      var fill = onRemove(_i3, prev[_i3]);\n      if (fill != null) {\n        ret.push(fill);\n      }\n    }\n  } // now all the items all present. Core sorting logic to have the right order\n\n  return ret.sort(function (a, b) {\n    var nextOrderA = nextKeyIndex[a.key];\n    var nextOrderB = nextKeyIndex[b.key];\n    var prevOrderA = prevKeyIndex[a.key];\n    var prevOrderB = prevKeyIndex[b.key];\n    if (nextOrderA != null && nextOrderB != null) {\n      // both keys in next\n      return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n    } else if (prevOrderA != null && prevOrderB != null) {\n      // both keys in prev\n      return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n    } else if (nextOrderA != null) {\n      // key a in next, key b in prev\n      // how to determine the order between a and b? We find a \"pivot\" (term\n      // abuse), a key present in both prev and next, that is sandwiched between\n      // a and b. In the context of our above example, if we're comparing a and\n      // d, b's (the only) pivot\n      for (var _i4 = 0; _i4 < next.length; _i4++) {\n        var pivot = next[_i4].key;\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n          return -1;\n        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n          return 1;\n        }\n      } // pluggable. default to: next bigger than prev\n\n      return 1;\n    } // prevOrderA, nextOrderB\n\n    for (var _i5 = 0; _i5 < next.length; _i5++) {\n      var _pivot = next[_i5].key;\n      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, _pivot)) {\n        continue;\n      }\n      if (nextOrderB < nextKeyIndex[_pivot] && prevOrderA > prevKeyIndex[_pivot]) {\n        return 1;\n      } else if (nextOrderB > nextKeyIndex[_pivot] && prevOrderA < prevKeyIndex[_pivot]) {\n        return -1;\n      }\n    } // pluggable. default to: next bigger than prev\n\n    return -1;\n  });\n}","map":{"version":3,"names":["exports","__esModule","mergeDiff","prev","next","onRemove","prevKeyIndex","i","length","key","nextKeyIndex","_i","ret","_i2","_i3","Object","prototype","hasOwnProperty","call","fill","push","sort","a","b","nextOrderA","nextOrderB","prevOrderA","prevOrderB","_i4","pivot","_i5","_pivot"],"sources":["/Users/sachins/Desktop/Projects/portfolio/node_modules/react-motion-prefixed/lib/mergeDiff.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = mergeDiff;\n\n// core keys merging algorithm. If previous render's keys are [a, b], and the\n// next render's [c, b, d], what's the final merged keys and ordering?\n// - c and a must both be before b\n// - b before d\n// - ordering between a and c ambiguous\n// this reduces to merging two partially ordered lists (e.g. lists where not\n// every item has a definite ordering, like comparing a and c above). For the\n// ambiguous ordering we deterministically choose to place the next render's\n// item after the previous'; so c after a\n// this is called a topological sorting. Except the existing algorithms don't\n// work well with js bc of the amount of allocation, and isn't optimized for our\n// current use-case bc the runtime is linear in terms of edges (see wiki for\n// meaning), which is huge when two lists have many common elements\nfunction mergeDiff(prev, next, onRemove) {\n  // bookkeeping for easier access of a key's index below. This is 2 allocations +\n  // potentially triggering chrome hash map mode for objs (so it might be faster\n  // to loop through and find a key's index each time), but I no longer care\n  var prevKeyIndex = {};\n\n  for (var i = 0; i < prev.length; i++) {\n    prevKeyIndex[prev[i].key] = i;\n  }\n\n  var nextKeyIndex = {};\n\n  for (var _i = 0; _i < next.length; _i++) {\n    nextKeyIndex[next[_i].key] = _i;\n  } // first, an overly elaborate way of merging prev and next, eliminating\n  // duplicates (in terms of keys). If there's dupe, keep the item in next).\n  // This way of writing it saves allocations\n\n\n  var ret = [];\n\n  for (var _i2 = 0; _i2 < next.length; _i2++) {\n    ret[_i2] = next[_i2];\n  }\n\n  for (var _i3 = 0; _i3 < prev.length; _i3++) {\n    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[_i3].key)) {\n      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n      // merge in keys that the user desires to kill\n      var fill = onRemove(_i3, prev[_i3]);\n\n      if (fill != null) {\n        ret.push(fill);\n      }\n    }\n  } // now all the items all present. Core sorting logic to have the right order\n\n\n  return ret.sort(function (a, b) {\n    var nextOrderA = nextKeyIndex[a.key];\n    var nextOrderB = nextKeyIndex[b.key];\n    var prevOrderA = prevKeyIndex[a.key];\n    var prevOrderB = prevKeyIndex[b.key];\n\n    if (nextOrderA != null && nextOrderB != null) {\n      // both keys in next\n      return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n    } else if (prevOrderA != null && prevOrderB != null) {\n      // both keys in prev\n      return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n    } else if (nextOrderA != null) {\n      // key a in next, key b in prev\n      // how to determine the order between a and b? We find a \"pivot\" (term\n      // abuse), a key present in both prev and next, that is sandwiched between\n      // a and b. In the context of our above example, if we're comparing a and\n      // d, b's (the only) pivot\n      for (var _i4 = 0; _i4 < next.length; _i4++) {\n        var pivot = next[_i4].key;\n\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n\n        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n          return -1;\n        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n          return 1;\n        }\n      } // pluggable. default to: next bigger than prev\n\n\n      return 1;\n    } // prevOrderA, nextOrderB\n\n\n    for (var _i5 = 0; _i5 < next.length; _i5++) {\n      var _pivot = next[_i5].key;\n\n      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, _pivot)) {\n        continue;\n      }\n\n      if (nextOrderB < nextKeyIndex[_pivot] && prevOrderA > prevKeyIndex[_pivot]) {\n        return 1;\n      } else if (nextOrderB > nextKeyIndex[_pivot] && prevOrderA < prevKeyIndex[_pivot]) {\n        return -1;\n      }\n    } // pluggable. default to: next bigger than prev\n\n\n    return -1;\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}